#! /usr/bin/env python

# Copyright (C) 2009-2016 by Akkana Peck.
# You are free to use, share or modify this program under
# the terms of the GPLv2 or, at your option, any later GPL.

VERSION = 0.5

import sys
import os

import pytopo.TrackPoints
import pytopo.trackstats

try:
    import pylab
    have_pylab = True
except ImportError:
    have_pylab = False
    print "pylab isn't installed; will print stats only, no plotting"

def main(args):
    if len(args) < 2:
        print "Ellie version", VERSION
        print "Usage:", os.path.basename(args[0]), \
            "[-b beta] [-w halfwidth] file.gpx"
        print """  beta (default 2) and halfwidth (default 15)
  are parameters for Kaiser window smoothing"""
        return 1

    # Default values that can be changed by commandline arguments:
    beta = 2
    halfwin = 15

    # Look for flags:
    args = args[1:]
    while args[0][0] == '-':
        if args[0] == '-b' and len(args) > 2:
            beta = float(args[1])
            args = args[2:]
            continue
        if args[0] == '-w' and len(args) > 2:
            halfwin = int(args[1])
            args = args[2:]
            continue
        print "Don't understand flag", args[0]

    #
    # Read the trackpoints file:
    #
    trackpoints = pytopo.TrackPoints()
    try:
        trackpoints.read_track_file(args[0])
    except IOError, e:
        print e
        #print dir(e)
        return e.errno

    out = pytopo.trackstats.statistics(trackpoints, halfwin, beta)

    #
    # Print and plot the results:
    #
    print "%.1f miles. Raw total climb: %d'" % (out['Total distance'],
                                                int(out['Raw total climb']))
    print "Smoothed climb: %d'" % out['Smoothed total climb']
    print "%d minutes moving, %d stopped" % (int(out['Moving time'] / 60),
                                             int(out['Stopped time'] / 60))
    print "Average speed moving: %.1f mph" % out['Average moving speed']
    if not have_pylab:
        return 0

    pylab.plot(out['Distances'], out['Elevations'],
               label="GPS elevation data", color="gray")
    pylab.plot(out['Distances'], out['Smoothed elevations'],
               color="red", label="smoothed (b=%.1f, hw=%d)" % (beta, halfwin))

    title_string = "Elevation profile (" + str(round(out['Distances'][-1], 1)) \
                   + " miles, " + str(int(out['Smoothed total climb'])) \
                   + "' climb)"
    pylab.title(title_string)

    # Set the window titlebar to something other than "Figure 1"
    pylab.gcf().canvas.set_window_title("Ellie: " + args[0])

    pylab.xlabel("miles")
#    pylab.get_current_fig_manager().window.set_title(os.path.basename(args[0] + ": " + title_string))
    pylab.ylabel("feet")
    pylab.grid(True)
    pylab.legend()
    pylab.show()

    pass
    return 0

if __name__ == "__main__":
    try:
        sys.exit(main(sys.argv))
    except KeyboardInterrupt:
        print " Bye!"
        sys.exit(1)

